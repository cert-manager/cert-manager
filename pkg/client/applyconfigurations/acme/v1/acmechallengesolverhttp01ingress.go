/*
Copyright The cert-manager Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// ACMEChallengeSolverHTTP01IngressApplyConfiguration represents an declarative configuration of the ACMEChallengeSolverHTTP01Ingress type for use
// with apply.
type ACMEChallengeSolverHTTP01IngressApplyConfiguration struct {
	ServiceType     *v1.ServiceType                                                `json:"serviceType,omitempty"`
	Class           *string                                                        `json:"class,omitempty"`
	Name            *string                                                        `json:"name,omitempty"`
	PodTemplate     *ACMEChallengeSolverHTTP01IngressPodTemplateApplyConfiguration `json:"podTemplate,omitempty"`
	IngressTemplate *ACMEChallengeSolverHTTP01IngressTemplateApplyConfiguration    `json:"ingressTemplate,omitempty"`
}

// ACMEChallengeSolverHTTP01IngressApplyConfiguration constructs an declarative configuration of the ACMEChallengeSolverHTTP01Ingress type for use with
// apply.
func ACMEChallengeSolverHTTP01Ingress() *ACMEChallengeSolverHTTP01IngressApplyConfiguration {
	return &ACMEChallengeSolverHTTP01IngressApplyConfiguration{}
}

// WithServiceType sets the ServiceType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceType field is set to the value of the last call.
func (b *ACMEChallengeSolverHTTP01IngressApplyConfiguration) WithServiceType(value v1.ServiceType) *ACMEChallengeSolverHTTP01IngressApplyConfiguration {
	b.ServiceType = &value
	return b
}

// WithClass sets the Class field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Class field is set to the value of the last call.
func (b *ACMEChallengeSolverHTTP01IngressApplyConfiguration) WithClass(value string) *ACMEChallengeSolverHTTP01IngressApplyConfiguration {
	b.Class = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ACMEChallengeSolverHTTP01IngressApplyConfiguration) WithName(value string) *ACMEChallengeSolverHTTP01IngressApplyConfiguration {
	b.Name = &value
	return b
}

// WithPodTemplate sets the PodTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodTemplate field is set to the value of the last call.
func (b *ACMEChallengeSolverHTTP01IngressApplyConfiguration) WithPodTemplate(value *ACMEChallengeSolverHTTP01IngressPodTemplateApplyConfiguration) *ACMEChallengeSolverHTTP01IngressApplyConfiguration {
	b.PodTemplate = value
	return b
}

// WithIngressTemplate sets the IngressTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IngressTemplate field is set to the value of the last call.
func (b *ACMEChallengeSolverHTTP01IngressApplyConfiguration) WithIngressTemplate(value *ACMEChallengeSolverHTTP01IngressTemplateApplyConfiguration) *ACMEChallengeSolverHTTP01IngressApplyConfiguration {
	b.IngressTemplate = value
	return b
}
