/*
Copyright The cert-manager Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ChallengeSolverStatusDNSApplyConfiguration represents a declarative configuration of the ChallengeSolverStatusDNS type for use
// with apply.
type ChallengeSolverStatusDNSApplyConfiguration struct {
	TTL         *metav1.Duration `json:"ttl,omitempty"`
	LastSuccess *metav1.Time     `json:"lastSuccess,omitempty"`
	FQDN        *string          `json:"fqdn,omitempty"`
}

// ChallengeSolverStatusDNSApplyConfiguration constructs a declarative configuration of the ChallengeSolverStatusDNS type for use with
// apply.
func ChallengeSolverStatusDNS() *ChallengeSolverStatusDNSApplyConfiguration {
	return &ChallengeSolverStatusDNSApplyConfiguration{}
}

// WithTTL sets the TTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TTL field is set to the value of the last call.
func (b *ChallengeSolverStatusDNSApplyConfiguration) WithTTL(value metav1.Duration) *ChallengeSolverStatusDNSApplyConfiguration {
	b.TTL = &value
	return b
}

// WithLastSuccess sets the LastSuccess field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSuccess field is set to the value of the last call.
func (b *ChallengeSolverStatusDNSApplyConfiguration) WithLastSuccess(value metav1.Time) *ChallengeSolverStatusDNSApplyConfiguration {
	b.LastSuccess = &value
	return b
}

// WithFQDN sets the FQDN field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FQDN field is set to the value of the last call.
func (b *ChallengeSolverStatusDNSApplyConfiguration) WithFQDN(value string) *ChallengeSolverStatusDNSApplyConfiguration {
	b.FQDN = &value
	return b
}
