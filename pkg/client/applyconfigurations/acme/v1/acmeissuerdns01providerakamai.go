/*
Copyright The cert-manager Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/cert-manager/cert-manager/pkg/apis/meta/v1"
)

// ACMEIssuerDNS01ProviderAkamaiApplyConfiguration represents an declarative configuration of the ACMEIssuerDNS01ProviderAkamai type for use
// with apply.
type ACMEIssuerDNS01ProviderAkamaiApplyConfiguration struct {
	ServiceConsumerDomain *string               `json:"serviceConsumerDomain,omitempty"`
	ClientToken           *v1.SecretKeySelector `json:"clientTokenSecretRef,omitempty"`
	ClientSecret          *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty"`
	AccessToken           *v1.SecretKeySelector `json:"accessTokenSecretRef,omitempty"`
}

// ACMEIssuerDNS01ProviderAkamaiApplyConfiguration constructs an declarative configuration of the ACMEIssuerDNS01ProviderAkamai type for use with
// apply.
func ACMEIssuerDNS01ProviderAkamai() *ACMEIssuerDNS01ProviderAkamaiApplyConfiguration {
	return &ACMEIssuerDNS01ProviderAkamaiApplyConfiguration{}
}

// WithServiceConsumerDomain sets the ServiceConsumerDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceConsumerDomain field is set to the value of the last call.
func (b *ACMEIssuerDNS01ProviderAkamaiApplyConfiguration) WithServiceConsumerDomain(value string) *ACMEIssuerDNS01ProviderAkamaiApplyConfiguration {
	b.ServiceConsumerDomain = &value
	return b
}

// WithClientToken sets the ClientToken field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientToken field is set to the value of the last call.
func (b *ACMEIssuerDNS01ProviderAkamaiApplyConfiguration) WithClientToken(value v1.SecretKeySelector) *ACMEIssuerDNS01ProviderAkamaiApplyConfiguration {
	b.ClientToken = &value
	return b
}

// WithClientSecret sets the ClientSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientSecret field is set to the value of the last call.
func (b *ACMEIssuerDNS01ProviderAkamaiApplyConfiguration) WithClientSecret(value v1.SecretKeySelector) *ACMEIssuerDNS01ProviderAkamaiApplyConfiguration {
	b.ClientSecret = &value
	return b
}

// WithAccessToken sets the AccessToken field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AccessToken field is set to the value of the last call.
func (b *ACMEIssuerDNS01ProviderAkamaiApplyConfiguration) WithAccessToken(value v1.SecretKeySelector) *ACMEIssuerDNS01ProviderAkamaiApplyConfiguration {
	b.AccessToken = &value
	return b
}
