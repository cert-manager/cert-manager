/*
Copyright The cert-manager Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// NameConstraintsApplyConfiguration represents a declarative configuration of the NameConstraints type for use
// with apply.
type NameConstraintsApplyConfiguration struct {
	Critical  *bool                                 `json:"critical,omitempty"`
	Permitted *NameConstraintItemApplyConfiguration `json:"permitted,omitempty"`
	Excluded  *NameConstraintItemApplyConfiguration `json:"excluded,omitempty"`
}

// NameConstraintsApplyConfiguration constructs a declarative configuration of the NameConstraints type for use with
// apply.
func NameConstraints() *NameConstraintsApplyConfiguration {
	return &NameConstraintsApplyConfiguration{}
}

// WithCritical sets the Critical field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Critical field is set to the value of the last call.
func (b *NameConstraintsApplyConfiguration) WithCritical(value bool) *NameConstraintsApplyConfiguration {
	b.Critical = &value
	return b
}

// WithPermitted sets the Permitted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Permitted field is set to the value of the last call.
func (b *NameConstraintsApplyConfiguration) WithPermitted(value *NameConstraintItemApplyConfiguration) *NameConstraintsApplyConfiguration {
	b.Permitted = value
	return b
}

// WithExcluded sets the Excluded field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Excluded field is set to the value of the last call.
func (b *NameConstraintsApplyConfiguration) WithExcluded(value *NameConstraintItemApplyConfiguration) *NameConstraintsApplyConfiguration {
	b.Excluded = value
	return b
}
