/*
Copyright 2018 Jetstack Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ACMEValidationLister helps list ACMEValidations.
type ACMEValidationLister interface {
	// List lists all ACMEValidations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ACMEValidation, err error)
	// ACMEValidations returns an object that can list and get ACMEValidations.
	ACMEValidations(namespace string) ACMEValidationNamespaceLister
	ACMEValidationListerExpansion
}

// aCMEValidationLister implements the ACMEValidationLister interface.
type aCMEValidationLister struct {
	indexer cache.Indexer
}

// NewACMEValidationLister returns a new ACMEValidationLister.
func NewACMEValidationLister(indexer cache.Indexer) ACMEValidationLister {
	return &aCMEValidationLister{indexer: indexer}
}

// List lists all ACMEValidations in the indexer.
func (s *aCMEValidationLister) List(selector labels.Selector) (ret []*v1alpha1.ACMEValidation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ACMEValidation))
	})
	return ret, err
}

// ACMEValidations returns an object that can list and get ACMEValidations.
func (s *aCMEValidationLister) ACMEValidations(namespace string) ACMEValidationNamespaceLister {
	return aCMEValidationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ACMEValidationNamespaceLister helps list and get ACMEValidations.
type ACMEValidationNamespaceLister interface {
	// List lists all ACMEValidations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ACMEValidation, err error)
	// Get retrieves the ACMEValidation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ACMEValidation, error)
	ACMEValidationNamespaceListerExpansion
}

// aCMEValidationNamespaceLister implements the ACMEValidationNamespaceLister
// interface.
type aCMEValidationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ACMEValidations in the indexer for a given namespace.
func (s aCMEValidationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ACMEValidation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ACMEValidation))
	})
	return ret, err
}

// Get retrieves the ACMEValidation from the indexer for a given namespace and name.
func (s aCMEValidationNamespaceLister) Get(name string) (*v1alpha1.ACMEValidation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("acmevalidation"), name)
	}
	return obj.(*v1alpha1.ACMEValidation), nil
}
