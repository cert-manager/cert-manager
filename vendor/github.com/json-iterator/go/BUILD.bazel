load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "feature_adapter.go",
        "feature_any.go",
        "feature_any_array.go",
        "feature_any_bool.go",
        "feature_any_float.go",
        "feature_any_int32.go",
        "feature_any_int64.go",
        "feature_any_invalid.go",
        "feature_any_nil.go",
        "feature_any_number.go",
        "feature_any_object.go",
        "feature_any_string.go",
        "feature_any_uint32.go",
        "feature_any_uint64.go",
        "feature_config.go",
        "feature_iter.go",
        "feature_iter_array.go",
        "feature_iter_float.go",
        "feature_iter_int.go",
        "feature_iter_object.go",
        "feature_iter_skip.go",
        "feature_iter_skip_strict.go",
        "feature_iter_string.go",
        "feature_json_number.go",
        "feature_pool.go",
        "feature_reflect.go",
        "feature_reflect_array.go",
        "feature_reflect_extension.go",
        "feature_reflect_map.go",
        "feature_reflect_native.go",
        "feature_reflect_object.go",
        "feature_reflect_slice.go",
        "feature_reflect_struct_decoder.go",
        "feature_stream.go",
        "feature_stream_float.go",
        "feature_stream_int.go",
        "feature_stream_string.go",
        "jsoniter.go",
    ],
    importmap = "github.com/jetstack/cert-manager/vendor/github.com/json-iterator/go",
    importpath = "github.com/json-iterator/go",
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

go_test(
    name = "go_default_test",
    srcs = [
        "example_test.go",
        "jsoniter_1dot8_only_test.go",
        "jsoniter_adapter_test.go",
        "jsoniter_alias_test.go",
        "jsoniter_any_array_test.go",
        "jsoniter_any_bool_test.go",
        "jsoniter_any_float_test.go",
        "jsoniter_any_int_test.go",
        "jsoniter_any_map_test.go",
        "jsoniter_any_null_test.go",
        "jsoniter_any_object_test.go",
        "jsoniter_any_string_test.go",
        "jsoniter_array_test.go",
        "jsoniter_bool_test.go",
        "jsoniter_customize_test.go",
        "jsoniter_demo_test.go",
        "jsoniter_encode_interface_test.go",
        "jsoniter_enum_marshaler_test.go",
        "jsoniter_fixed_array_test.go",
        "jsoniter_float_test.go",
        "jsoniter_int_test.go",
        "jsoniter_interface_test.go",
        "jsoniter_invalid_test.go",
        "jsoniter_io_test.go",
        "jsoniter_iterator_test.go",
        "jsoniter_large_file_test.go",
        "jsoniter_map_test.go",
        "jsoniter_must_be_valid_test.go",
        "jsoniter_nested_test.go",
        "jsoniter_null_test.go",
        "jsoniter_object_test.go",
        "jsoniter_optional_test.go",
        "jsoniter_raw_message_test.go",
        "jsoniter_reader_test.go",
        "jsoniter_reflect_native_test.go",
        "jsoniter_skip_test.go",
        "jsoniter_stream_test.go",
        "jsoniter_string_test.go",
        "jsoniter_struct_decoder_test.go",
        "jsoniter_struct_encoder_test.go",
        "jsoniter_wrap_test.go",
        "unmarshal_input_test.go",
    ],
    embed = [":go_default_library"],
    tags = ["manual"],
    deps = [
        "//vendor/github.com/google/gofuzz:go_default_library",
        "//vendor/github.com/stretchr/testify/require:go_default_library",
    ],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [":package-srcs"],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
