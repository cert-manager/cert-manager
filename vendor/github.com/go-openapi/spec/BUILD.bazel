load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "bindata.go",
        "contact_info.go",
        "expander.go",
        "external_docs.go",
        "header.go",
        "info.go",
        "items.go",
        "license.go",
        "operation.go",
        "parameter.go",
        "path_item.go",
        "paths.go",
        "ref.go",
        "response.go",
        "responses.go",
        "schema.go",
        "security_scheme.go",
        "spec.go",
        "swagger.go",
        "tag.go",
        "xml_object.go",
    ],
    importmap = "github.com/jetstack/cert-manager/vendor/github.com/go-openapi/spec",
    importpath = "github.com/go-openapi/spec",
    tags = ["manual"],
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/go-openapi/jsonpointer:go_default_library",
        "//vendor/github.com/go-openapi/jsonreference:go_default_library",
        "//vendor/github.com/go-openapi/swag:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    srcs = [
        "auth_test.go",
        "contact_info_test.go",
        "expander_test.go",
        "external_docs_test.go",
        "header_test.go",
        "info_test.go",
        "items_test.go",
        "license_test.go",
        "operation_test.go",
        "parameters_test.go",
        "path_item_test.go",
        "paths_test.go",
        "properties_test.go",
        "response_test.go",
        "schema_test.go",
        "structs_test.go",
        "swagger_test.go",
        "xml_object_test.go",
    ],
    embed = [":go_default_library"],
    tags = ["manual"],
    deps = [
        "//vendor/github.com/go-openapi/jsonpointer:go_default_library",
        "//vendor/github.com/go-openapi/swag:go_default_library",
        "//vendor/github.com/stretchr/testify/assert:go_default_library",
        "//vendor/github.com/stretchr/testify/require:go_default_library",
        "//vendor/gopkg.in/yaml.v2:go_default_library",
    ],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [":package-srcs"],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
