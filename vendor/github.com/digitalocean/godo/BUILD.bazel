load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "account.go",
        "action.go",
        "cdn.go",
        "certificates.go",
        "doc.go",
        "domains.go",
        "droplet_actions.go",
        "droplets.go",
        "errors.go",
        "firewalls.go",
        "floating_ips.go",
        "floating_ips_actions.go",
        "godo.go",
        "image_actions.go",
        "images.go",
        "keys.go",
        "links.go",
        "load_balancers.go",
        "projects.go",
        "regions.go",
        "sizes.go",
        "snapshots.go",
        "storage.go",
        "storage_actions.go",
        "strings.go",
        "tags.go",
        "timestamp.go",
    ],
    importmap = "github.com/jetstack/cert-manager/vendor/github.com/digitalocean/godo",
    importpath = "github.com/digitalocean/godo",
    tags = ["manual"],
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/google/go-querystring/query:go_default_library",
        "//vendor/github.com/tent/http-link-go:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    srcs = [
        "account_test.go",
        "action_test.go",
        "cdn_test.go",
        "certificates_test.go",
        "domains_test.go",
        "droplet_actions_test.go",
        "droplets_test.go",
        "errors_test.go",
        "firewalls_test.go",
        "floating_ips_actions_test.go",
        "floating_ips_test.go",
        "godo_test.go",
        "image_actions_test.go",
        "images_test.go",
        "keys_test.go",
        "links_test.go",
        "load_balancers_test.go",
        "projects_test.go",
        "regions_test.go",
        "sizes_test.go",
        "snapshots_test.go",
        "storage_actions_test.go",
        "storage_test.go",
        "tags_test.go",
        "timestamp_test.go",
    ],
    embed = [":go_default_library"],
    tags = ["manual"],
    deps = ["//vendor/github.com/stretchr/testify/assert:go_default_library"],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [":package-srcs"],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
