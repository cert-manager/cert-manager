load("@bazel_gazelle//:def.bzl", "gazelle")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")
load("@io_kubernetes_build//defs:run_in_workspace.bzl", "workspace_binary")
load("@com_github_atlassian_bazel_tools//goimports:def.bzl", "goimports")

gazelle(
    name = "gazelle",
    command = "fix",
    external = "vendored",
    extra_args = [
        "-build_file_name",
        "BUILD.bazel",
    ],
    prefix = "github.com/jetstack/cert-manager",
)

gazelle(
    name = "gazelle-diff",
    command = "fix",
    external = "vendored",
    extra_args = [
        "-build_file_name",
        "BUILD.bazel",
    ],
    mode = "diff",
    prefix = "github.com/jetstack/cert-manager",
)

workspace_binary(
    name = "dep",
    cmd = "//vendor/github.com/golang/dep/cmd/dep",
)

workspace_binary(
    name = "openapi-gen",
    cmd = "//vendor/k8s.io/code-generator/cmd/openapi-gen",
)

workspace_binary(
    name = "gen-apidocs",
    cmd = "//vendor/github.com/kubernetes-incubator/reference-docs/gen-apidocs",
)

workspace_binary(
    name = "gen-swagger",
    cmd = "//docs/generated/reference",
)

goimports(
    name = "goimports",
    display_diffs = True,
    write = True,
    prefix = "github.com/jetstack/cert-manager",
)

goimports(
    name = "goimports-verify",
    display_diffs = True,
    report_all_errors = True,
    prefix = "github.com/jetstack/cert-manager",
)

genrule(
    name = "gethelm",
    srcs = select({
        ":darwin": ["@helm_darwin//:helm"],
        ":k8": ["@helm_linux//:helm"],
    }),
    outs = ["helm"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "getbuildozer",
    srcs = select({
        ":darwin": ["@buildozer_darwin//file"],
        ":k8": ["@buildozer_linux//file"],
    }),
    outs = ["buildozer"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "getkazel",
    srcs = ["@io_kubernetes_build//kazel"],
    outs = ["kazel"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

config_setting(
    name = "k8",
    values = {"host_cpu": "k8"},
    visibility = ["//visibility:public"],
)

config_setting(
    name = "darwin",
    values = {"host_cpu": "darwin"},
    visibility = ["//visibility:public"],
)

filegroup(
    name = "images",
    srcs = [
        "//cmd/acmesolver:image",
        "//cmd/controller:image",
    ],
)

container_push(
    name = "controller",
    format = "Docker",
    image = "//cmd/controller:image",
    registry = "quay.io",
    repository = "jetstack/cert-manager-controller",
    tag = "{STABLE_DOCKER_TAG}",
)

container_push(
    name = "acmesolver",
    format = "Docker",
    image = "//cmd/acmesolver:image",
    registry = "quay.io",
    repository = "jetstack/cert-manager-acmesolver",
    tag = "{STABLE_DOCKER_TAG}",
)

filegroup(
    name = "package-srcs",
    srcs = glob(
        ["**"],
        exclude = [
            "bazel-*/**",
            ".git/**",
        ],
    ),
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [
        ":package-srcs",
        "//cmd/acmesolver:all-srcs",
        "//cmd/controller:all-srcs",
        "//contrib/charts:all-srcs",
        "//contrib/manifests:all-srcs",
        "//docs/generated/reference:all-srcs",
        "//hack:all-srcs",
        "//pkg/acme:all-srcs",
        "//pkg/api:all-srcs",
        "//pkg/apis:all-srcs",
        "//pkg/client/clientset/versioned:all-srcs",
        "//pkg/client/informers/externalversions:all-srcs",
        "//pkg/client/listers/certmanager/v1alpha1:all-srcs",
        "//pkg/controller:all-srcs",
        "//pkg/issuer:all-srcs",
        "//pkg/logs:all-srcs",
        "//pkg/scheduler:all-srcs",
        "//pkg/util:all-srcs",
        "//test/chart:all-srcs",
        "//test/e2e:all-srcs",
        "//test/util:all-srcs",
        "//third_party/crypto/acme:all-srcs",
        "//third_party/k8s.io/code-generator:all-srcs",
    ],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
